{"version":3,"sources":["components/TodoFormEdit.js","components/TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["TodoFormEdit","this","props","change","value","name","add","className","onChange","e","type","id","placeholder","onClick","Component","TodoItem","edit","item","editItem","state","deleteItem","doneItem","classNames","isComplete","content","App","itemDelete","listTodo","todoItems","filter","setState","itemDone","find","indexOf","slice","onInputChange","newItem","target","addTodo","trim","newTodoItems","map","uuidv4","isEdit","itemEdit","length","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a0eb8d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoFormEdit extends Component {\r\n    render() {\r\n        const { change, value, name, add } = this.props\r\n        return (\r\n            <div className=\"add-todo\">\r\n                <input onChange={(e) => change(e)} value={value} type=\"text\" name=\"\" id=\"input-todo\" placeholder=\"Enter todo...\" />\r\n                <button onClick={() => add()} className=\"btn-add\">{name}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoFormEdit;","import classNames from 'classnames';\r\nimport React, { Component } from 'react';\r\n\r\nclass TodoItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editItem: this.props.item\r\n        }\r\n    }\r\n\r\n\r\n    edit = (item) => {\r\n        this.props.editItem(item)\r\n    }\r\n\r\n    render() {\r\n        const { deleteItem, item, doneItem, edit } = this.props\r\n        return (\r\n            <div>\r\n                <div className={classNames('todo-item',\r\n                    {\r\n                        'done': item.isComplete,\r\n                        'edit': edit\r\n                    },\r\n                )}>\r\n                    <button onClick={() => doneItem(item)} className=\"done-btn\">\r\n                        <i className=\"far fa-check-circle\"></i>\r\n                    </button>\r\n                    <p className=\"todo-text\">{item.content}</p>\r\n                    <div className=\"todo-btn\">\r\n                        <button onClick={() => deleteItem(item)}><i className=\"far fa-times-circle\"></i></button>\r\n                        <button onClick={(item) => this.edit(this.state.editItem)}><i className=\"fas fa-edit\"></i></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport TodoFormEdit from './components/TodoFormEdit';\r\nimport TodoItem from './components/TodoItem';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newItem: '',\r\n            edit: false,\r\n            editItem: {},\r\n            todoItems: []\r\n        }\r\n    }\r\n\r\n    deleteItem = (itemDelete) => {\r\n        const { todoItems } = this.state\r\n        const listTodo = todoItems.filter(item => {\r\n            return (item.id !== itemDelete.id)\r\n        })\r\n        this.setState({\r\n            todoItems: listTodo\r\n        })\r\n    }\r\n\r\n    doneItem = (itemDone) => {\r\n        const { todoItems } = this.state\r\n        const isComplete = itemDone.isComplete\r\n        const find = todoItems.indexOf(itemDone)\r\n        this.setState({\r\n            todoItems: [\r\n                ...todoItems.slice(0, find),\r\n                { ...itemDone, isComplete: !isComplete },\r\n                ...todoItems.slice(find + 1),\r\n            ]\r\n        })\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            newItem: e.target.value\r\n        })\r\n    }\r\n\r\n    addTodo = () => {\r\n        const { newItem, edit, todoItems } = this.state\r\n        if (newItem.trim() === '') return;\r\n        if (!edit) {\r\n            this.setState({\r\n                newItem: '',\r\n                todoItems: [\r\n                    ...todoItems, { id: uuidv4(), content: newItem, isComplete: false, isEdit: false }\r\n                ]\r\n            })\r\n        }\r\n        else {\r\n            const newTodoItems = todoItems.map(item => {\r\n                if (this.state.editItem.id === item.id) {\r\n                    item.content = newItem\r\n                }\r\n                return item\r\n            })\r\n            this.setState({\r\n                newItem: '',\r\n                todoItems: newTodoItems,\r\n                edit: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    editItem = (itemEdit) => {\r\n        this.setState({\r\n            editItem: itemEdit,\r\n            newItem: itemEdit.content,\r\n            edit: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { newItem, todoItems, edit } = this.state\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"app-container\">\r\n                    <h1 className=\"title\">What's the plan for today?</h1>\r\n                    <TodoFormEdit name={edit ? \"Update\" : \"Add\"}\r\n                        value={newItem}\r\n                        change={this.onInputChange}\r\n                        add={this.addTodo}\r\n                    />\r\n                    {todoItems && todoItems.length > 0 &&\r\n                        todoItems.map((item, index) => {\r\n                            return (\r\n                                <TodoItem\r\n                                    key={item.id}\r\n                                    item={item}\r\n                                    edit={edit}\r\n                                    deleteItem={this.deleteItem}\r\n                                    doneItem={this.doneItem}\r\n                                    editItem={this.editItem}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                    {todoItems.length === 0 &&\r\n                        <p className=\"nothing\">Nothing todo</p>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}